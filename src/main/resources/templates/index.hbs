<!DOCTYPE html>
<html lang="en">
<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
            crossorigin="anonymous"></script>
    <link href="/css/chess.css" rel="stylesheet">
    <meta charset="UTF-8">
    <title>썬의 체스</title>
</head>
<body>
<div class="chess-header">
    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#createGame">
        게임 생성
    </button>
    <button class="btn btn-dark" onclick="location.href='/member-management'">멤버 관리</button>
</div>
<div class="container" style="flex-direction: column;">
    {{#games}}
        <div class="card" style="width: 100%; margin-top: 1vh;">
            <div class="card-body">
                <h5 class="card-title">{{room.title}}</h5>
                <h6 class="card-subtitle mb-2 text-muted">{{room.participant.whiteName}}
                    vs {{room.participant.blackName}}
                </h6>
                {{#running}}
                    <h6 class="card-subtitle mb-2 text-muted">
                        <span class="badge bg-success">게임 진행 중</span>
                    </h6>
                {{else}}
                    <h6 class="card-subtitle mb-2 text-muted">
                        <span class="badge bg-danger">게임 종료</span>
                    </h6>
                {{/running}}
                <a onclick="validatePassword({{id}})" class="btn btn-dark">입장</a>
                <a onclick="deleteGame({{id}})" class="btn btn-danger">삭제</a>
            </div>
        </div>
    {{/games}}
</div>

<!-- 게임 생성 Modal -->
<div class="modal fade" id="createGame" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">게임 생성</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <div>방 제목:</div>
                <input type="text" id="title" class="form-control" placeholder="방 제목을 입력하세요."><br>
                <div>방 비밀번호:</div>
                <input type="text" id="password" class="form-control" placeholder="방 비밀번호를 입력하세요."><br>
                <div>백팀 멤버:</div>
                <select id="white" class="form-control">
                    {{#members}}
                        <option value="{{id}}">{{name}}</option>
                    {{/members}}
                </select><br>
                <div>흑팀 멤버:</div>
                <select id="black" class="form-control">
                    {{#members}}
                        <option value="{{id}}">{{name}}</option>
                    {{/members}}
                </select><br>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                <button type="button" class="btn btn-primary" onclick="createGame()">생성</button>
            </div>
        </div>
    </div>
</div>
</body>

<script>
    const validatePassword = (gameId) => {
        let password = prompt("비밀번호를 입력하세요");
        fetch(`/game/${gameId}/password`, {
            method: "POST",
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: `password=${password}`
        }).then(async response => {
            if (response.status === 400) {
                let errorMessage = await response.text();
                alert(errorMessage);
                return;
            }
            location.href = `/game/${gameId}`;
        }).catch(error => alert(error));
    }
    const validate2 = (gameId) => {
        let password = prompt("비밀번호를 입력하세요");
        fetch(`/game/${gameId}/password`, {
            method: "POST",
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                password: password
            })
        }).then(async response => {
            if (response.status === 400) {
                let errorMessage = await response.text();
                alert(errorMessage);
                return;
            }
        }).catch(error => alert(error));
    }

    const deleteGame = (gameId) => {
        let isDelete = confirm("정말 삭제하시겠습니까?");
        if (!isDelete) {
            return;
        }
        let password = prompt("비밀번호를 입력하세요");

        fetch(`/game/${gameId}`, {
            method: "DELETE",
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                password: password
            })
        }).then(async response => {
            if (response.ok) {
                alert("정삭적으로 삭제되었습니다.")
            }
            if (response.status === 400) {
                let errorMessage = await response.text();
                alert(errorMessage);
            }
            location.reload();
        })
    }

    const createGame = () => {
        let title = document.getElementById("title").value;
        let password = document.getElementById("password").value;
        let whiteId = document.getElementById("white").value;
        let blackId = document.getElementById("black").value;

        fetch("/chessGame", {
            method: "POST",
            body: JSON.stringify({
                title: title,
                password: password,
                whiteId: whiteId,
                blackId: blackId
            }),
            headers: {
                'Content-Type': 'application/json',
            }
        }).then(response => {
            if (response.ok) {
                alert("게임이 생성되었습니다.");
                location.reload();
            }
            if (!response.ok) {
                alert(response.statusText);
            }
        });
    }
</script>

</html>
